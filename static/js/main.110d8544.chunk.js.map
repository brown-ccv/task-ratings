{"version":3,"sources":["lib/markup/stimuli.js","lib/utils.js","lib/markup/photodiode.js","config/trigger.js","trials/camera.js","config/main.js","components/Login.jsx","lib/markup/eventMarkerMessage.js","trials/holdUpMarker.js","trials/startCode.js","timelines/preamble.js","timelines/main.js","trials/countdown.js","lib/taskUtils.js","trials/beepScreen.js","trials/enterRating.js","components/JsPsychExperiment.jsx","firebase.js","App.jsx","index.js"],"names":["__webpack_require__","d","__webpack_exports__","baseStimulus","element","prompt","arguments","length","undefined","centered","concat","sleep","getProlificId","getTurkUniqueId","beep","jspsych_react__WEBPACK_IMPORTED_MODULE_0__","ms","Promise","resolve","setTimeout","turkInfo","jsPsych","turk","workerId","assignmentId","variable","vars","window","location","search","substring","split","i","pair","decodeURIComponent","getQueryVariable","audioCodes","context","AudioContext","o","createOscillator","g","createGain","type","connect","frequency","setValueAtTime","console","log","currentTime","destination","start","stop","photodiodeGhostBox","pdSpotEncode","_config_main__WEBPACK_IMPORTED_MODULE_0__","_config_trigger__WEBPACK_IMPORTED_MODULE_1__","jquery__WEBPACK_IMPORTED_MODULE_2__","jquery__WEBPACK_IMPORTED_MODULE_2___default","n","ipcRenderer","config","USE_ELECTRON","electron","require","class_","USE_PHOTODIODE","taskCode","numBlinks","eventCodes","open_task","repeat_pulse_for","callback","$","css","background-color","pulse_for","send","module","exports","fixation","evidence","show_earnings","test_connect","cameraStart","document","title","taskName","markup","lang","instructions","camera","stimulus","choices","continue","button","response_ends_trial","on_load","participantId","data","get","values","participant_id","getElementById","handleEvents","stream","recorder","srcObject","recordedChunks","MediaRecorder","mimeType","addEventListener","e","size","push","blob","media","reader","FileReader","fileName","Date","now","onload","readyState","buffer","Buffer","result","JSON","stringify","readAsArrayBuffer","saveBlob","Blob","navigator","mediaDevices","getUserMedia","video","then","desktopCapturer","getSources","types","_ref","Object","_home_runner_work_task_ratings_task_ratings_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_2__","_home_runner_work_task_ratings_task_ratings_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","mark","_callee","sources","_iterator","_step","source","wrap","_context","prev","next","_home_runner_work_task_ratings_task_ratings_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_1__","s","done","value","name","mandatory","chromeMediaSource","chromeMediaSourceId","id","catch","error","err","f","_x","apply","this","on_finish","USE_CAMERA","cameraCapture","screenCapture","alert","cameraEnd","duration","task","recording_end","trial_duration","lodash__WEBPACK_IMPORTED_MODULE_1__","lodash__WEBPACK_IMPORTED_MODULE_1___default","_trigger__WEBPACK_IMPORTED_MODULE_2__","_brown_ccv_behavioral_task_trials__WEBPACK_IMPORTED_MODULE_3__","_lib_utils__WEBPACK_IMPORTED_MODULE_4__","USE_MTURK","outsideTurk","USE_PROLIFIC","USE_FIREBASE","process","REACT_APP_FIREBASE","_unused","REACT_APP_VIDEO","USE_EEG","mlang","_","merge","init","USE_VOLUME","Login","onLogin","envParticipantId","envStudyId","validationFunction","_useState","useState","_useState2","slicedToArray","setParticipant","_useState3","_useState4","studyId","setStudy","_useState5","_useState6","setError","useEffect","react_default","createElement","className","role","Form","onSubmit","preventDefault","loggedIn","Group","controlId","Label","Control","autoFocus","onChange","target","Button","style","width","block","disabled","eventMarkerMessage","asyncToGenerator","regenerator_default","abrupt","eventMarker","found","holdUpMarker","focus","innerHTML","startCode","setting_up","timeline","showMessage","responseType","message","responseEndsTrial","buttons","preamble","countdown","range","map","val","timeFormat","toISOString","substr","beepScreen","finish","_on_load","enterRating","enter_rating","questions","options","required","horizontal","submit_time","primaryTimeline","main_instructions","splice","end","tl","JsPsychExperiment","dataUpdateFunction","dataFinishFunction","experiment","settings","on_data_update","apiKey","REACT_APP_apiKey","authDomain","REACT_APP_authDomain","databaseURL","REACT_APP_databaseURL","projectId","REACT_APP_projectId","storageBucket","REACT_APP_storageBucket","messagingSenderId","REACT_APP_messagingSenderId","appId","REACT_APP_appId","db","firebase","initializeApp","firestore","hostname","useEmulator","initParticipant","startDate","collection","doc","set","start_time","app_version","appVersion","app_platform","platform","results","addToFirebase","study_id","start_date","update","FieldValue","arrayUnion","App","setLogin","setRenderer","psiturk","setPsiturk","_useState7","_useState8","setEnvParticipantId","_useState9","_useState10","setEnvStudyId","_useState11","_useState12","currentMethod","setMethod","_useState13","_useState14","reject","setReject","query","URLSearchParams","defaultValidation","defaultFunction","setLoggedIn","useCallback","addProperties","task_version","version","credentials","sendSync","lodash","noConflict","turkId","PsiTurk","pID","Fragment","components_JsPsychExperiment","desktop","mturk","recordTrialData","default","_ref2","_callee2","_context2","saveData","completeHIT","completePsiturk","components_Login","ReactDOM","render","src_App"],"mappings":"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","file":"static/js/main.110d8544.chunk.js","sourcesContent":["const baseStimulus = (element, prompt = false, centered = false) => {\n  const class_ = centered\n    ? \"center_container\"\n    : prompt\n    ? \"main-prompt\"\n    : \"main\";\n  return `<div class=${class_}>${element}</div>`;\n};\n\nexport { baseStimulus };\n","import { jsPsych } from 'jspsych-react'\n\nconst sleep = (ms) => {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n// add a random number between 0 and offset to the base number\nconst jitter = (base, offset) => (\n  base + Math.floor(Math.random() * Math.floor(offset))\n)\n\n// add a random number between 0 and 50 to the base number\nconst jitter50 = (base) => jitter(base, 50)\n\n// flip a coin\nconst randomTrue = () => Math.random() > 0.5\n\n// deeply copy an object\nconst deepCopy = (obj) => JSON.parse(JSON.stringify(obj))\n\n// format a number as a dollar amount\nconst formatDollars = (amount) => '$' + parseFloat(amount).toFixed(2)\n\n\n// create a pre-trial wait period\nconst generateWaitSet = (trial, waitTime) => {\n  let waitTrial = Object.assign({}, trial)\n  waitTrial.trial_duration = waitTime\n  waitTrial.response_ends_trial = false\n  waitTrial.prompt = '-'\n\n  return [waitTrial, trial]\n}\n\nconst keypressResponse = (info) => {\n  const data = {\n    key_press: info.key\n  }\n\n  jsPsych.finishTrial(data)\n}\n\nconst startKeypressListener = () => {\n  let keyboardListener = jsPsych.pluginAPI.getKeyboardResponse({\n    callback_function: keypressResponse,\n    valid_responses: jsPsych.ALL_KEYS,\n    persist: false\n  })\n\n  return keyboardListener\n}\n\nconst getTurkUniqueId = () => {\n  const turkInfo = jsPsych.turk.turkInfo()\n  const uniqueId = `${turkInfo.workerId}:${turkInfo.assignmentId}`\n  return uniqueId\n}\n\nconst getQueryVariable = (variable) => {\n  let query = window.location.search.substring(1);\n  let vars = query.split(\"&\");\n  for (let i = 0; i < vars.length; i++) {\n    let pair = vars[i].split(\"=\");\n    if (decodeURIComponent(pair[0]) === variable) {\n      return decodeURIComponent(pair[1]);\n    }\n  }\n};\n\nconst getProlificId = () => {\n  const prolificId = getQueryVariable(\"PROLIFIC_PID\");\n  return prolificId\n};\n\nconst beep = (audioCodes) => {\n  const context = new AudioContext()\n  const o = context.createOscillator()\n  const g = context.createGain()\n  o.type = audioCodes.type\n  o.connect(g)\n  o.frequency.setValueAtTime(audioCodes.frequency, 0)\n  console.log(context.currentTime)\n  g.connect(context.destination)\n  o.start()\n  o.stop(context.currentTime + 0.4)\n}\n\n\nexport {\n  sleep,\n  jitter,\n  jitter50,\n  randomTrue,\n  deepCopy,\n  formatDollars,\n  generateWaitSet,\n  startKeypressListener,\n  getProlificId,\n  getTurkUniqueId,\n  beep\n}\n","import { config } from \"../../config/main\";\nimport { eventCodes } from \"../../config/trigger\";\nimport $ from \"jquery\";\n\n// conditionally load electron and psiturk based on MTURK config variable\nlet ipcRenderer = false;\nif (config.USE_ELECTRON) {\n  const electron = window.require(\"electron\");\n  ipcRenderer = electron.ipcRenderer;\n}\n\n// Relies on styling in App.css, generate PD spot\nconst photodiodeGhostBox = () => {\n  const class_ = config.USE_PHOTODIODE ? \"visible\" : \"invisible\";\n\n  const markup = `<div class=\"photodiode-box ${class_}\" id=\"photodiode-box\">\n\t\t\t\t\t\t\t\t\t<span id=\"photodiode-spot\" class=\"photodiode-spot\"></span>\n  \t\t\t\t\t\t\t\t</div>`;\n  return markup;\n};\n\nconst pdSpotEncode = (taskCode) => {\n  function pulse_for(ms, callback) {\n    $(\".photodiode-spot\").css({ \"background-color\": \"black\" });\n    setTimeout(() => {\n      $(\".photodiode-spot\").css({ \"background-color\": \"white\" });\n      callback();\n    }, ms);\n  }\n\n  function repeat_pulse_for(ms, i) {\n    if (i > 0) {\n      pulse_for(ms, () => {\n        setTimeout(() => {\n          repeat_pulse_for(ms, i - 1);\n        }, ms);\n      });\n    }\n  }\n\n  if (config.USE_PHOTODIODE) {\n    const blinkTime = 40;\n    let numBlinks = taskCode;\n    if (taskCode < eventCodes.open_task) numBlinks = 1;\n    repeat_pulse_for(blinkTime, numBlinks);\n    if (ipcRenderer) ipcRenderer.send(\"trigger\", taskCode);\n  }\n};\n\nexport { photodiodeGhostBox, pdSpotEncode };\n","// NOTE - these event codes must match what is in public/config/trigger.js\nconst eventCodes = {\n\tfixation: 1,\n\tevidence: 5,\n\tshow_earnings: 7,\n\ttest_connect: 32,\n\topen_task: 18\n}\n\n// this is module.exports isntead of just exports as it is also imported into the electron app\nmodule.exports = {\n\teventCodes\n}\n","import { lang, taskName, config} from '../config/main'\nimport { photodiodeGhostBox } from '../lib/markup/photodiode'\nimport { baseStimulus } from '../lib/markup/stimuli'\nimport { jsPsych } from 'jspsych-react'\n\n\nlet ipcRenderer = false;\nif (config.USE_ELECTRON) {\n  const electron = window.require('electron');\n  ipcRenderer  = electron.ipcRenderer;\n}\n\nfunction saveBlob(blob, media, participantId) {\n  let reader = new FileReader()\n  let fileName =`pid_${participantId}_${media}_${Date.now()}.webm`\n  reader.onload = function() {\n      if (reader.readyState === 2) {\n          var buffer = new Buffer(reader.result)\n          ipcRenderer.send('save_video', fileName, buffer)\n          console.log(`Saving ${JSON.stringify({ fileName, size: blob.size })}`)\n      }\n  }\n  reader.readAsArrayBuffer(blob)\n}\n\nconst cameraStart = () => {\n  document.title = taskName\n  let markup = `\n  <div class=\"d-flex flex-column align-items-center\">\n  <p>${lang.instructions.camera}</p>\n  <video id=\"camera\" width=\"640\" height=\"480\" autoplay></video>\n  </div>\n  `\n  let stimulus = baseStimulus(markup, true) +\n                 photodiodeGhostBox()\n\n  return {\n    type: 'html_button_response',\n    stimulus: stimulus,\n    choices: [ lang.prompt.continue.button],\n    response_ends_trial: true,\n    on_load: () => {\n      // Grab elements, create settings, etc.\n      // Elements for taking the snapshot\n      const participantId = jsPsych.data.get().values()[0].participant_id\n\n      let camera = document.getElementById('camera');\n\n\n      const handleEvents = function(stream, recorder) {\n        console.log(stream)\n        if (recorder === \"cameraCapture\") {\n          camera.srcObject = stream;\n        }\n      \n        \n        const options = {mimeType: 'video/webm'};\n        const recordedChunks = [];\n        window[recorder] = new MediaRecorder(stream, options);\n    \n        window[recorder].addEventListener('dataavailable', function(e) {\n          if (e.data.size > 0) {\n            recordedChunks.push(e.data);\n          }\n        });\n    \n        window[recorder].addEventListener('stop', function() {\n          const blob = new Blob(recordedChunks)\n          saveBlob(blob, recorder, participantId)\n        });\n    \n      };\n    \n      navigator.mediaDevices.getUserMedia({ video: true })\n          .then((stream) => handleEvents(stream, 'cameraCapture'));\n\n      const { desktopCapturer } = window.require('electron')\n\n      desktopCapturer.getSources({ types: ['window'] }).then(async sources => {\n        for (const source of sources) {\n          if (source.name === taskName) {\n            navigator.mediaDevices.getUserMedia({\n              video: {\n                mandatory: {\n                  chromeMediaSource: 'desktop',\n                  chromeMediaSourceId: source.id\n                }\n              }\n            }).then(stream => {\n              handleEvents(stream, 'screenCapture')\n            })\n            .catch(error => console.log(error))\n          } \n        }\n      })\n    \n    },\n    on_finish: () => {\n      if (config.USE_CAMERA) {\n        try {\n          window.cameraCapture.start()\n          window.screenCapture.start()\n        } catch (error) {\n          window.alert(\"Camera permissions were not given, if you choose to proceed, your recording will not be saved. Please restart the experiment after you have given permission.\")\n        }\n        \n      }\n    }\n  }\n}\n\nconst cameraEnd = (duration) => {\n  let stimulus = baseStimulus(`<h1>${lang.task.recording_end}</h1>`, true) + photodiodeGhostBox()\n\n   return {\n    type: 'html_keyboard_response',\n    stimulus: stimulus,\n    trial_duration: duration,\n    on_load: () => {\n      if (config.USE_CAMERA) {\n        console.log('finished')\n        try {\n          window.cameraCapture.stop()\n          window.screenCapture.stop()\n        } catch (error) {\n          window.alert(\"Your video recording was not saved\")\n        }\n        \n      }\n    }\n  }\n}\n\n\nexport {\n  cameraStart,\n  cameraEnd\n}","// config/main.js\n// This is the main configuration file where universal and default settings should be placed.\n// These settins can then be imported anywhere in the app as they are exported at the botom of the file.\n\nimport { jsPsych } from \"jspsych-react\";\nimport _ from \"lodash\";\nimport { eventCodes } from \"./trigger\";\nimport { init } from \"@brown-ccv/behavioral-task-trials\";\nimport { getProlificId } from \"../lib/utils\";\n\n// mapping of letters to key codes\nconst keys = {\n  A: 65,\n  B: 66,\n  C: 67,\n  F: 70,\n  J: 74,\n  space: 32,\n};\n\n// audio codes\nconst audioCodes = {\n  frequency: 100 * (eventCodes.open_task - 9),\n  type: \"sine\",\n};\n\nconst taskName = \"Ratings\";\n\n// is this mechanical turk?\nlet USE_MTURK = !jsPsych.turk.turkInfo().outsideTurk;\nlet USE_PROLIFIC = getProlificId() && !USE_MTURK;\nlet USE_ELECTRON = true;\nlet USE_FIREBASE = process.env.REACT_APP_FIREBASE === \"true\";\n\ntry {\n  window.require(\"electron\");\n} catch {\n  USE_ELECTRON = false;\n}\n\n\n// whether or not to ask the participant to adjust the volume\nconst USE_VOLUME = process.env.REACT_APP_VOLUME === \"true\";\n// these variables depend on USE_ELECTRON\n// whether or not to enable video\nconst USE_CAMERA = process.env.REACT_APP_VIDEO === \"true\" && USE_ELECTRON;\n// whether or not the EEG/event marker is available\nconst USE_EEG =\n  process.env.REACT_APP_USE_EEG === \"true\" && USE_ELECTRON;\n// whether or not the photodiode is in use\nconst USE_PHOTODIODE =\n  process.env.REACT_APP_USE_PHOTODIODE === \"true\" && USE_ELECTRON;\n\n// get language file\nconst lang = require(\"../language/en_us.json\");\nif (!USE_ELECTRON) {\n  // if this is mturk, merge in the mturk specific language\n  const mlang = require(\"../language/en_us.mturk.json\");\n  _.merge(lang, mlang);\n}\n\nconst defaultBlockSettings = {\n  conditions: [\"a\", \"b\", \"c\"],\n  repeats_per_condition: 1, // number of times every condition is repeated\n  is_practice: false,\n  is_tutorial: false,\n  photodiode_active: false,\n};\n\n// setting config for trials\nconst config = init({\n  USE_PHOTODIODE,\n  USE_EEG,\n  USE_ELECTRON,\n  USE_MTURK,\n  USE_VOLUME,\n  USE_CAMERA,\n  USE_PROLIFIC,\n  USE_FIREBASE\n});\n\nexport {\n  taskName,\n  keys,\n  defaultBlockSettings,\n  lang,\n  eventCodes,\n  config,\n  audioCodes,\n};\n","import React, { useState, useEffect } from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\n\nfunction Login({ onLogin, envParticipantId, envStudyId, validationFunction }) {\n  // State variables for login screen\n  const [participantId, setParticipant] = useState(\"\");\n  const [studyId, setStudy] = useState(\"\");\n  const [error, setError] = useState(false);\n\n  useEffect(() => {\n    // Update based on environment variables\n    setParticipant(envParticipantId);\n    setStudy(envStudyId);\n  }, [envParticipantId, envStudyId]);\n\n  // Checks if forms are filled in\n  function validateForm() {\n    return participantId.length > 0 && studyId.length > 0;\n  }\n\n  // Function to log in participant\n  function handleSubmit(e) {\n    e.preventDefault();\n    // Validates fields\n    validationFunction(participantId, studyId)\n    // Logs in depending on result from promise\n    .then((loggedIn) => {\n      if (loggedIn) {\n        onLogin(loggedIn, studyId, participantId);\n      } else {\n        setError(true);\n      }\n    });\n  }\n\n  return (\n    <div className=\"centered-h-v\">\n      <div className=\"width-50\">\n        {error ? (\n          <div className=\"alert alert-danger\" role=\"alert\">\n            The participant ID and study ID do not match\n          </div>\n        ) : null}\n        <Form className=\"centered-h-v\" onSubmit={handleSubmit}>\n          <Form.Group className=\"width-100\" size=\"lg\" controlId=\"participantId\">\n            <Form.Label>Participant ID</Form.Label>\n            <Form.Control\n              autoFocus\n              type=\"participantId\"\n              value={participantId}\n              onChange={(e) => setParticipant(e.target.value)}\n            />\n          </Form.Group>\n          <Form.Group className=\"width-100\" size=\"lg\" controlId=\"studyId\">\n            <Form.Label>Study ID</Form.Label>\n            <Form.Control\n              type=\"studyId\"\n              value={studyId}\n              onChange={(e) => setStudy(e.target.value)}\n            />\n          </Form.Group>\n          <Button\n            style={{ width: \"100%\" }}\n            block\n            size=\"lg\"\n            type=\"submit\"\n            disabled={!validateForm()}\n          >\n            Log In\n          </Button>\n        </Form>\n      </div>\n    </div>\n  );\n}\n\nexport default Login;\n","import { lang } from '../../config/main'\n\nconst eventMarkerMessage = async () => {\n\t\treturn `<span style=\"color: green;\">${lang.eventMarker.found}</span>`\n}\n\nexport default eventMarkerMessage\n","import { lang } from '../config/main'\nimport { photodiodeGhostBox } from '../lib/markup/photodiode'\nimport { baseStimulus } from '../lib/markup/stimuli'\nimport eventMarkerMessage from '../lib/markup/eventMarkerMessage'\n\nconst holdUpMarker = () => {\n  let stimulus = baseStimulus(`<div><h2 id='usb-alert'></h2></div>`, true) + photodiodeGhostBox()\n\n   return {\n    type: 'html_button_response',\n    stimulus: stimulus,\n    prompt: [`<br><h3>${lang.prompt.focus}</h3>`],\n    choices: [lang.prompt.continue.button],\n    on_load: () => (eventMarkerMessage()\n                      .then(s => document.getElementById('usb-alert')\n                      .innerHTML = s )\n                    )\n  }\n}\n\nexport default holdUpMarker\n","import { eventCodes, lang, audioCodes } from '../config/main'\nimport { photodiodeGhostBox, pdSpotEncode } from '../lib/markup/photodiode'\nimport { baseStimulus } from '../lib/markup/stimuli'\nimport { beep } from '../lib/utils'\n\nconst startCode = () => {\n  let stimulus = baseStimulus(`<h1>${lang.prompt.setting_up}</h1>`, true) + photodiodeGhostBox()\n\n   return {\n    type: 'html_keyboard_response',\n    stimulus: stimulus,\n    trial_duration: 2000,\n    on_load: () => {\n      pdSpotEncode(eventCodes.open_task)\n      beep(audioCodes)\n    }\n\n  }\n}\n\nexport default startCode\n","import holdUpMarker from \"../trials/holdUpMarker\";\nimport startCode from \"../trials/startCode\";\nimport { lang, config } from \"../config/main\";\nimport { showMessage } from \"@brown-ccv/behavioral-task-trials\";\n\nlet timeline = [showMessage(config, {\n  responseType: \"html_button_response\",\n  message: lang.task.name,\n  responseEndsTrial: true,\n  buttons: [lang.prompt.continue.button],\n})]\nif (config.USE_PHOTODIODE) {\n  timeline.push(holdUpMarker())\n  timeline.push(startCode())\n}\n\nconst preamble = {\n  type: \"html_keyboard_response\",\n  stimulus: \"\",\n  timeline: timeline\n};\n\n\n\nexport default preamble;\n","import preamble from \"./preamble\";\nimport countdown from \"../trials/countdown\";\nimport beepScreen from \"../trials/beepScreen\";\nimport enterRating from \"../trials/enterRating\"\nimport { cameraStart, cameraEnd } from \"../trials/camera\"\nimport { lang, config } from \"../config/main\";\nimport { showMessage } from \"@brown-ccv/behavioral-task-trials\";\n\n\nlet primaryTimeline = [\n  preamble,\n  showMessage(config, {\n    responseType: \"html_button_response\",\n    message: lang.instructions.main_instructions,\n    responseEndsTrial: true,\n    buttons: [lang.prompt.continue.button],\n  }),\n];\n// Countdown for 6 blocks. 1st block 30 min -> 25 min, 2nd 25 min -> 20 min, ..., 6th 5 min -> 0\nfor (let i = 5; i >= 0; i--) {\n  // countdown takes in start and end in seconds\n  primaryTimeline.push(countdown(300*(i+1), 300*i));\n  primaryTimeline.push(beepScreen());\n  primaryTimeline.push(enterRating())\n}\n\nif (config.USE_CAMERA) {\n  primaryTimeline.splice(1,0,cameraStart())\n  primaryTimeline.push(cameraEnd(5000))\n}\n\nprimaryTimeline.push(showMessage(config, {\n  duration: 5000,\n  message: lang.task.end,\n}))\n\n\nexport const tl = primaryTimeline;\n","import { lang } from '../config/main'\nconst _ = require(\"lodash\");\n\nconst countdown = (start, stop) => {\n    const times = _.range(start, stop, -1);\n    const timeline = times.map((val) => {\n        let timeFormat = new Date(1000 * val).toISOString().substr(11, 8)\n        return { prompt: `<h1>${timeFormat}</h1>` };\n    });\n\n    \n    return {\n        type: 'html_keyboard_response',\n        stimulus: `<h1 class='countdown'>${lang.countdown.message}</h1>`,\n        response_ends_trial: false,\n        trial_duration: 1000,\n        timeline: timeline,\n        on_finish: (data) => {\n            data.countdown = true\n        }\n    }\n}\n\nexport default countdown\n","// utilities specific to this app/task\n\nimport _ from 'lodash'\n\n// initialize starting conditions for each trial within a block\nconst generateStartingOpts = (blockSettings) => {\n\tlet startingOptions = blockSettings.conditions.map( (c) => {\n\t\t// Repeat each starting condition the same number of times\n\t\treturn _.range(blockSettings.repeats_per_condition).map( () => c )\n\t})\n\n\treturn _.shuffle(_.flatten(startingOptions))\n}\n\nconst beep = () => {\n\tconst context = new AudioContext()\n\tconst o = context.createOscillator()\n\tconst g = context.createGain()\n\to.type = 'sine'\n\to.connect(g)\n\tg.connect(context.destination)\n\to.start()\n\to.stop(context.currentTime + 1)\n}\n\nexport {\n\tgenerateStartingOpts,\n\tbeep\n}\n","import { lang } from '../config/main'\nimport { beep } from '../lib/taskUtils'\nimport { sleep } from '../lib/utils'\nimport { baseStimulus } from '../lib/markup/stimuli'\n\nconst beepScreen = () => {\n    const stimulus = baseStimulus(`\n    <div class='instructions'>\n    <h1>${lang.countdown.finish}</h1>\n    </div>\n    `, true)\n    \n    return {\n        type: 'html_keyboard_response',\n        stimulus: stimulus,\n        response_ends_trial: false,\n        trial_duration: 6000,\n        on_load: async () => {\n            beep()\n            await sleep(2500)\n            beep()\n        }\n    }\n}\n\nexport default beepScreen","import { lang } from '../config/main'\nimport { baseStimulus } from '../lib/markup/stimuli'\n\nconst enterRating = () => {\n\n    const ratingOptions = [0,1,2,3,4,5,6,7,8,9,10]\n\n    return {\n        type: 'survey_multi_choice',\n        preamble: baseStimulus(`<h1>${lang.instructions.enter_rating}</h1>`, true),\n        questions: [{ prompt: 'Enter rating', name: 'rating', options: ratingOptions, required: true, horizontal: true}],\n        on_finish: (data) => {\n            data.submit_time = Date.now()\n        }\n      }\n}\n\nexport default enterRating","import React from \"react\";\nimport { Experiment } from \"jspsych-react\";\nimport { tl } from \"../timelines/main\";\n\nfunction JsPsychExperiment({ dataUpdateFunction, dataFinishFunction }) {\n\n  return (\n    <div className=\"App\">\n      <Experiment\n        settings={{\n          timeline: tl,\n          on_data_update: (data) => dataUpdateFunction(data),\n          on_finish: (data) => dataFinishFunction(data),\n        }}\n      />\n    </div>\n  );\n}\nexport default JsPsychExperiment;\n","import firebase from \"firebase\";\nimport 'firebase/firestore';\n\nrequire(\"dotenv\").config();\n\n// Set collection name\nconst collectionName = \"participant_responses\";\n\n// Firebase config\nlet config = {\n  apiKey: process.env.REACT_APP_apiKey,\n  authDomain: process.env.REACT_APP_authDomain,\n  databaseURL: process.env.REACT_APP_databaseURL,\n  projectId: process.env.REACT_APP_projectId || \"no-firebase\",\n  storageBucket: process.env.REACT_APP_storageBucket,\n  messagingSenderId: process.env.REACT_APP_messagingSenderId,\n  appId: process.env.REACT_APP_appId,\n};\n\n\n// Get a Firestore instance\nvar db = firebase.initializeApp(config).firestore();\n\n// Use emulator if on localhost\nif (window.location.hostname === \"localhost\") {\n  db.useEmulator(\"localhost\", 8080);\n}\n\n// Add participant data and trial data to db\nconst initParticipant = (participantId, studyId, startDate) => {\n  // return promise with value true if participant and study id match, false otherwise\n    return db.collection(collectionName)\n    .doc(studyId)\n    .collection('participants')\n    .doc(participantId)\n    .collection('data')\n    .doc(startDate)\n    .set({ start_time: startDate, app_version: window.navigator.appVersion, app_platform: window.navigator.platform, results: []})\n    .then(()=>{\n      return true\n    })\n    .catch((error) => {\n      return false\n    });\n};\n\n// Add inidividual trials to db\nconst addToFirebase = (data) => {\n  console.log(data)\n  const participantId = data.participant_id;\n  const studyId = data.study_id;\n  const startDate = data.start_date\n  \n  db.collection(collectionName)\n    .doc(studyId)\n    .collection('participants')\n    .doc(participantId)\n    .collection('data')\n    .doc(startDate)\n    .update('results', firebase.firestore.FieldValue.arrayUnion(data))\n};\n\n// Export types that exists in Firestore\nexport {\n  db,\n  collectionName,\n  initParticipant,\n  addToFirebase\n};\n\nexport default firebase;","import React, { useState, useEffect, useCallback } from \"react\";\n\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"@fortawesome/fontawesome-free/css/all.css\";\n\nimport Login from \"./components/Login\";\nimport JsPsychExperiment from \"./components/JsPsychExperiment\";\n\nimport { jsPsych } from \"jspsych-react\";\nimport { getTurkUniqueId, getProlificId, sleep } from \"./lib/utils\";\nimport { initParticipant, addToFirebase } from \"./firebase\";\n\nimport { config } from \"./config/main\";\nimport { version } from \"../package.json\"\n\nfunction App() {\n  // Variables for time\n  const startDate = new Date().toISOString();\n  // Variables for login\n  const [loggedIn, setLogin] = useState(false);\n  const [ipcRenderer, setRenderer] = useState(false);\n  const [psiturk, setPsiturk] = useState(false);\n  const [envParticipantId, setEnvParticipantId] = useState(\"\");\n  const [envStudyId, setEnvStudyId] = useState(\"\");\n  const [currentMethod, setMethod] = useState(\"default\");\n  const [reject, setReject] = useState(false);\n\n  const query = new URLSearchParams(window.location.search);\n\n  // Validation functions for desktop case and firebase\n  const defaultValidation = async () => {\n    return true;\n  };\n  const firebaseValidation = (participantId, studyId) => {\n    return initParticipant(participantId, studyId, startDate);\n  };\n\n  // Adding data functions for firebase, electron adn Mturk\n  const defaultFunction = (data) => {};\n  const firebaseUpdateFunction = (data) => {\n    addToFirebase(data);\n  };\n  const desktopUpdateFunction = (data) => {\n    if (data.countdown!==true)\n      ipcRenderer.send(\"data\", data);\n  };\n  const psiturkUpdateFunction = (data) => {\n    psiturk.recordTrialData(data);\n  };\n\n  // On finish functions for electron, Mturk\n  const desktopFinishFunction = () => {\n    ipcRenderer.send(\"end\", \"true\");\n  };\n  const psiturkFinishFunction = () => {\n    const completePsiturk = async () => {\n      psiturk.saveData();\n      await sleep(5000);\n      psiturk.completeHIT();\n    };\n    completePsiturk();\n  };\n\n  // Function to add jspsych data on login\n  const setLoggedIn = useCallback(\n    (loggedIn, studyId, participantId) => {\n      if (loggedIn) {\n        jsPsych.data.addProperties({\n          participant_id: participantId,\n          study_id: studyId,\n          start_date: startDate,\n          task_version: version\n        });\n      }\n      setLogin(loggedIn);\n    },\n    [startDate]\n  );\n\n  // Login logic\n  useEffect(() => {\n    // For testing and debugging purposes\n    console.log(\"Turk:\", config.USE_MTURK);\n    console.log(\"Firebase:\", config.USE_FIREBASE);\n    console.log(\"Prolific:\", config.USE_PROLIFIC);\n    console.log(\"Electron:\", config.USE_ELECTRON);\n    console.log(\"Video:\", config.USE_CAMERA);\n    console.log(\"Volume:\", config.USE_VOLUME);\n    console.log(\"Event Marker:\", config.USE_EEG);\n    console.log(\"Photodiode:\", config.USE_PHOTODIODE);\n    // If on desktop\n    if (config.USE_ELECTRON) {\n      const { ipcRenderer } = window.require(\"electron\");\n      setRenderer(ipcRenderer);\n      ipcRenderer.send('updateEnvironmentVariables', config)\n      // If at home, fill in fields based on environment variables\n      const credentials = ipcRenderer.sendSync(\"syncCredentials\");\n      if (credentials.envParticipantId) {\n        setEnvParticipantId(credentials.envParticipantId);\n      }\n      if (credentials.envStudyId) {\n        setEnvStudyId(credentials.envStudyId);\n      }\n      setMethod(\"desktop\");\n    }\n    // If online\n    else {\n      // If MTURK\n      if (config.USE_MTURK) {\n        /* eslint-disable */\n        window.lodash = _.noConflict();\n        const turkId = getTurkUniqueId();\n        setPsiturk(new PsiTurk(turkId, \"/complete\"));\n        setMethod(\"mturk\");\n        setLoggedIn(true, \"mturk\", turkId);\n        /* eslint-enable */\n      }\n\n      // If prolific\n      else if (config.USE_PROLIFIC) {\n        const pID = getProlificId();\n        if (config.USE_FIREBASE && pID) {\n          setMethod(\"firebase\");\n          setLoggedIn(true, \"prolific\", pID);\n        } else {\n          setReject(true);\n        }\n      }\n\n      // If firebase\n      else if (config.USE_FIREBASE) {\n        setMethod(\"firebase\");\n        // Autologin with query parameters\n        const participantId = query.get(\"participantID\");\n        const studyId = query.get(\"studyID\");\n        if (participantId) {\n          setEnvParticipantId(participantId)\n        }\n        if (studyId) {\n          setEnvStudyId(studyId)\n        }\n      } else {\n        setReject(true);\n      }\n    }\n  // eslint-disable-next-line \n  }, []);\n\n  if (reject) {\n    return (\n      <div className=\"centered-h-v\">\n        <div className=\"width-50 alert alert-danger\">\n          Please ask your task provider to enable firebase.\n        </div>\n      </div>\n    );\n  } else {\n    return (\n      <>\n        {loggedIn ? (\n          <JsPsychExperiment\n            dataUpdateFunction={\n              {\n                desktop: desktopUpdateFunction,\n                firebase: firebaseUpdateFunction,\n                mturk: psiturkUpdateFunction,\n                default: defaultFunction,\n              }[currentMethod]\n            }\n            dataFinishFunction={\n              {\n                desktop: desktopFinishFunction,\n                mturk: psiturkFinishFunction,\n                firebase: defaultFunction,\n                default: defaultFunction,\n              }[currentMethod]\n            }\n          />\n        ) : (\n          <Login\n            validationFunction={\n              {\n                desktop: defaultValidation,\n                default: defaultValidation,\n                firebase: firebaseValidation,\n              }[currentMethod]\n            }\n            envParticipantId={envParticipantId}\n            envStudyId={envStudyId}\n            onLogin={setLoggedIn}\n          />\n        )}\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}